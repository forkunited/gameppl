// Run with:
// webppl test/wppl/train_model_seqS0.wppl --require webppl-nn --require . --random-seed 1 --iterations 100 --latentDim 25 --inputF Ld_in --outputF Ld_out

var args = parseArgs();
var rootDir = args["rootDir"];
var inputFName = args["inputF"];
var outputFName = args["outputF"];
var iterations = args["iterations"]*1;
var latentDim = args["latentDim"]*1;
var maxUtteranceLength = 10;
var approximationBeamSize = 5;
var batchSize = 100;
var gradientSamples = 1;

var inputF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + inputFName);
var outputF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + outputFName);

var D = data_makeDataFromFeatureMatrices(inputF, outputF, { inputType : DATA_TYPE_VECTOR, outputType : DATA_TYPE_SCALAR_SEQUENCE });
var partition = gameppl.partition.load(rootDir + "/examples/games/splits/1/default");
var D_split = gameppl.partition.split(partition, D, gameppl.data.getDatumGame);
var D_train = D_split['train'];
var D_dev = D_split['dev'];

var encoderType = ENC_NN;
var encoderParamFn = function() {
    return {
        name : "enc_S0",
        encoderType : NN_ENCODER_TANH,
        latentDimension : latentDim
    };
};

var decoderType = ENC_SEQ;
var decoderParamFn = function() {
    return {
        initStepFn : nn_initSequenceDecoderStep,
        stepParams : {
            name : "dec_S0",
            latentDimension : latentDim
        },
        startSymbol : gameppl.feature.symbols.START_SYMBOL,
        terminalSymbol : gameppl.feature.symbols.TERMINAL_SYMBOL,
        maxLength : maxUtteranceLength,
        samplingType : SEQ_DECODER_EXACT,
        approximationBeamSize : approximationBeamSize
    };
};

var trainingParams = {
    iterations : iterations,
    gradientSamples : gradientSamples,
    batchSize : batchSize,
    encoderType : encoderType,
    decoderType : decoderType,
    encoderParamFn : encoderParamFn,
    decoderParamFn : decoderParamFn,
    distributionFn : util_objCategorical
};

var model = enc_initTrainedModel(trainingParams, D_train);
