// evaluation.wppl
//
// Code for evaluating various types of models
//

// evaluation_modelDistLL
//
// modelDist : model function that takes data inputs and produces distributions
// D : (input, output) pairs over which to apply modelDist and compute log-likelihood
//
// return log-likelihood of data in D according to modelDist model
var evaluation_modelDistLL = function(modelDist, D) {
    return sum(map(function(d) { return modelDist(d.input).score(d.output) }, D));
};

// evaluation_modelEncModeAccuracy
//
// model : encoder/decoder model represented by code in enc.wppl
// D : data set containing (input,output) datums
// distributionFn : function that takes encoder/decoder model output
// and produces a distribution
//
// return accuracy on data in D for encoder/decoder model
// with distributions constructed through distributionFn
var evaluation_modelEncModeAccuracy = function(model, D, distributionFn) {
    var makeInfoKey = function(d) { return (d.info) ? _.join(_.values(d.info), ".") : undefined };

    var correctIndicators = map(function(d) {
        var modes = enc_modelModes(model, d.input, distributionFn);
        var correct = modes[0] === d.output.toString() ? 1.0 : 0.0 ;

        return { key : makeInfoKey(d), value : correct }
    }, D);

    var aggs = gameppl.util.aggregateKeyValuePairs(correctIndicators);

    return mapObject(function(agg, aggIndicators) {
        return {
            acc : listMean(aggIndicators)
        };
    }, aggs);
};

// evaluation_modelEncModeAccuracyGrungyData
//
// model : encoder/decoder model represented by code in enc.wppl
// D : data set containing (input,output) datums
// makeDistributionFn : function that takes a model and a datum and produces a distributionFn
// outputFn : datum -> target output for which to evaluate accuracy
//
// return accuracy on data in D for encoder/decoder model
// with distributions constructed through distributionFn
var evaluation_modelEncModeAccuracyGrungyData = function(model, D, makeDistributionFn, outputFn) {
    var makeInfoKey = function(d) { return (d.info) ? _.join(_.values(d.info), ".") : undefined };

    var correctIndicators = map(function(d) {
        var distributionFn = makeDistributionFn(model, d);
        var modes = enc_modelModes(model, d.input, distributionFn);
        var output = outputFn(d);
        var correct = modes[0] === output.toString() ? 1.0 : 0.0 ;

        return { key : makeInfoKey(d), value : correct }
    }, D);

    var aggs = gameppl.util.aggregateKeyValuePairs(correctIndicators);

    return mapObject(function(agg, aggIndicators) {
        return {
            acc : listMean(aggIndicators)
        };
    }, aggs);
};

// evaluation_modelEncLL
//
// model : encoder/decoder model represented by code in enc.wppl
// D : data set containing (input,output) datums
// distributionFn : function that takes encoder/decoder model output
// and produces a distribution
// hideNegs : Hide output proportion of examples with -Inf or undefined ll
//
// return log-likelihood of data in D according to encoder/decoder model
// with distributions constructed through distributionFn
var evaluation_modelEncLL = function(model, D, distributionFn, hideNegs) {
    var makeInfoKey = function(d) { return (d.info) ? _.join(_.values(d.info), ".") : undefined };

    var lls = map(function(d) { return { key : makeInfoKey(d), value : enc_modelLL(model, d.output, d.input, distributionFn) } }, D);
    var aggs = gameppl.util.aggregateKeyValuePairs(lls);

    if (hideNegs) {
        return mapObject(function (agg, agglls) {
            return {
                ll: listMean(map(function (ll) {
                    ll !== -Infinity && ll !== undefined ? ll : 0.0
                }, agglls))
            };
        }, aggs);
    } else {
        return mapObject(function (agg, agglls) {
            return {
                ll: listMean(map(function (ll) {
                    ll !== -Infinity && ll !== undefined ? ll : 0.0
                }, agglls)),
                neg: listMean(map(function (ll) {
                    ll === -Infinity ? 1.0 : 0.0
                }, agglls)),
                undef: listMean(map(function (ll) {
                    ll === undefined ? 1.0 : 0.0
                }, agglls))
            };
        }, aggs);
    }
};

var evaluation_modelMeaningExpectedIncrement = function(makeScoreFn, D, s_model, maybeS_inputFn) {
    var incEval = gameppl.util.listExpectation(map(function (datum) {
        var scoreFn = makeScoreFn(datum);
        return enc_modelExpectedIncrement(s_model,
            (maybeS_inputFn !== undefined) ? maybeS_inputFn(datum.input, datum.output) : undefined,
            s_getDistributionFn(s_model), scoreFn,
            datum.output);
    }, D));

    return { inc : _.fromPairs(mapIndexed(function(index, value) { [index, value] }, incEval)) };
}

// evaluation_modelEncEvalFlattened
//
// evals : Evaluations output from evaluation_modelEncLL
// [maybePrefix] : Optional prefix for key strings
//
// return [list of keys, list of values]
var evaluation_modelEncEvalFlattened = function(evals, maybePrefix) {
    var keyValuePairs = _.flatten(_.values(mapObject(function(key, innerObj) {
        return _.values(mapObject(function(innerKey, innerValue) {
            if (maybePrefix)
                return [maybePrefix + "." + key + "." + innerKey, innerValue];
            else
                return [key + "." + innerKey, innerValue];
        }, innerObj))
    }, evals)));
    
    return _.unzip(sort(keyValuePairs, lt, function(kvPair) { return kvPair[0] }));
};

// evaluation_flattenedStrings
//
// flats : Outputs from evaluation_modelEncEvalFlattened
//
// return [key string, valueString]
var evaluation_flattenedKeyValueStrings = function(flats) {
    var flatStrs = map(function(flat) {
        return [flat[0].join("\t"), flat[1].join("\t")];
    }, flats);

    var keysValues = _.unzip(flatStrs);
    return [keysValues[0].join("\t"), keysValues[1].join("\t")]
};
