// s1seqSampling.wppl
//
// Represents a RSA S1 sequence learning model
// (Sampling S0 used for utterance prior)

var _s1seqSampling_initS1S0Dists = function(s0model, s0sampleDistractors, s0sampleSize, s0inputFn, observation, hidden, worldPriorSupport, maybeObserved) {
    if (s0sampleDistractors && maybeObserved !== undefined) {
        return _.flatten(map(function (possibleHidden) {
            if (possibleHidden == hidden && maybeObserved !== undefined) {
                return enc_modelScoredSamples(s0model, s0inputFn(observation, possibleHidden), util_objCategorical, s0sampleSize, true, maybeObserved)
            } else
                return enc_modelScoredSamples(s0model, s0inputFn(observation, possibleHidden), util_objCategorical, s0sampleSize, true)
        }, worldPriorSupport))
    } else {
        var samples = s0sampleDistractors ? s0sampleSize * worldPriorSupport.length - 1 : s0sampleSize;
        return enc_modelScoredSamples(s0model, s0inputFn(observation, hidden), util_objCategorical, samples, true, maybeObserved);
    }
};

// _s1seqSampling_initS1DistFn
//
// Private function for constructing function that constructs an
// rsa S1 distribution
var _s1seqSampling_initS1DistFn = function(initParams) {
    var worldPrior = initParams.rsaWorldPrior;
    var hiddenWorldFn = initParams.rsaHiddenWorldFn;
    var observedWorldFn = initParams.rsaObservedWorldFn;
    var alpha = initParams.rsaAlpha;
    var l0seqFn = initParams.l0seqFn; // utterance x hidden x observation -> l0 input vector sequence
    var s0sampleSize = initParams.s0sampleSize;
    var s0sampleDistractors = initParams.s0sampleDistractors;

    return function(s1FillerOutput, world, params, maybeObserved) {
        var l0model = params.l0model;
        var l0distFn = params.l0distFn;
        var s0model = params.s0model;
        var s0inputFn = params.s0inputFn;
        var worldPriorSupport = params.rsaWorldPriorSupport;

        var observation = observedWorldFn(world);
        var hidden = hiddenWorldFn(world);

        var s0output = _s1seqSampling_initS1S0Dists(s0model, s0sampleDistractors, s0sampleSize, s0inputFn, observation, hidden, worldPriorSupport, maybeObserved);

        var rsaParams = {
            cacheSize: 100,
            alpha: alpha,
            parametersPrior: function(observation) { return observation },
            utterancePrior: function(observation, parameters) { sample(util_objSoftmaxCategorical(s0output)); },
            worldPrior: worldPrior,
            denotationDistFn: function(utterance, hidden, parameters) {
                var l0seq = l0seqFn(utterance, hidden, parameters);
                return enc_modelDistribution(l0model, l0seq, l0distFn);
            }
        };

        var S1 = makeRSA(rsaParams, RSA_S, 1);

        return S1(hidden, observation);
    }
};

// s1seqSampling_initTrainedModel
//
// params:
//   maxUtteranceLength : Maximum length for decoded utterances
//   worldDimension : Dimension of input world
//   utteranceDimension : Size of utterance token vectors
//   l0inputDimension : Dimension of inputs to the l0 encoder
//   s0inputDimension : Dimension of inputs to the l0 encoder
//   latentDimension : Size of hidden layer (must be even)
//   s0sampleSize : Number of samples to take from s0 for utterance prior
//   s0sampleDistractors : Indicator of whether s0 should draw samples from distractors
//   iterations : Training iterations
//   sIterations : Training iterations for internal s models
//   gradientSamples : Training gradient samples
//   batchSize : Training batch size,
//   l0seqFn : utterance x hidden x observation -> l0 input vector sequence
//   s0inputFn : world -> input to s0 encoder
//   rsaAlpha : Speaker rationality
//   rsaWorldPrior : observed world -> sample of hidden world
//   rsaWorldPriorSize : Number of elements in world prior support for a given observation
//   rsaHiddenWorldFn : world -> part of world hidden from listener
//   rsaObservedWorldFn : world -> part of world observed by listener
// D : Data
//
// return trained s1 sequential model
var s1seqSampling_initTrainedModel = function(params, D) {
    // S0 model
    var s0Params = {
        encoderType : ENC_NN,
        decoderType : ENC_SEQ,
        encoderParamFn : function() {
            return {
                name : "enc_S0",
                inputDimension : params.s0inputDimension,
                encoderType : NN_ENCODER_TANH,
                latentDimension : params.latentDimension
            };
        },
        decoderParamFn : function() {
            return {
                name : "dec_S0",
                latentDimension : params.latentDimension,
                outputDimension : params.utteranceDimension,
                initStepFn : nn_initSequenceDecoderStep,
                startSymbol : gameppl.feature.symbols.START_SYMBOL,
                terminalSymbol : gameppl.feature.symbols.TERMINAL_SYMBOL,
                maxLength : params.maxUtteranceLength,
                samplingType : SEQ_DECODER_EXACT,
                approximationBeamSize : params.beamSize
            };
        },
        iterations : params.sIterations,
        gradientSamples : params.gradientSamples,
        batchSize : params.batchSize,
        distributionFn : util_objCategorical
    };

    var l0Params = {
        encoderType : ENC_SEQ,
        decoderType : ENC_NN,
        encoderParams : {
            name : "enc_L0",
            latentDimension : params.latentDimension,
            inputDimension : params.l0inputDimension,
            initStepFn : nn_initSequenceEncoderStep,
            inputType : DATA_TYPE_VECTOR,
            makeInitialStateFn : function() {
                var encoderConstant = nn_initEncoder({name : "enc_init_L0", encoderType : NN_ENCODER_CONSTANT, latentDimension : params.latentDimension });
                return nn_applyEncoder(encoderConstant);
            }
        },
        decoderParams : {
            name: "dec_L0",
            decoderType :  NN_DECODER_SIGMOID,
            latentDimension : params.latentDimension,
            outputDimension : 1
        }
    };

    var l0distFn = function(output) {
        return Bernoulli({ p : T.toScalars(output)[0] });
    };

    display("Training internal s0...");

    var hiddenWorldFn = params.rsaHiddenWorldFn;
    var observedWorldFn = params.rsaObservedWorldFn;
    var s0inputFn = params.s0inputFn;
    var s0model = enc_initTrainedModel(s0Params,
        map(function(datum) {
            return mapObject(function (key, value) {
                if (key === 'input') {
                    var observed = observedWorldFn(value);
                    var hidden = hiddenWorldFn(value);
                    return s0inputFn(observed, hidden);
                } else
                    return value
            }, datum)
        }, D)
    ); // Applies s0inputFn to data set before training s0

    display("Training s1 meaning model...");

    /* S1 */

    var s1distFn = _s1seqSampling_initS1DistFn(params);

    var worldPrior = params.rsaWorldPrior;
    var worldPriorSupport = _.keys(gameppl.dist.distToObject(Infer({method:'enumerate'}, worldPrior)));
    var s1Params = {
        name : "S1",
        modelParamFn : function() {
            var l0model = enc_initModel(l0Params);

            var l0distFn = function(output) {
                return Bernoulli({ p : T.toScalars(output)[0] });
            };

            return {
                s0model : s0model,
                l0model : l0model,
                l0distFn : l0distFn,
                l0seqFn : params.l0seqFn,
                s0inputFn : s0inputFn,
                s0sampleSize : params.s0sampleSize,
                s0sampleDistractors : params.s0sampleDistractors,
                rsaAlpha : params.rsaAlpha,
                rsaWorldPrior : params.rsaWorldPrior,
                rsaWorldPriorSupport : worldPriorSupport,
                rsaHiddenWorldFn : params.rsaHiddenWorldFn,
                rsaObservedWorldFn : params.rsaObservedWorldFn,
                s1distFn : s1distFn
            };
        },
        iterations : params.iterations,
        gradientSamples : params.gradientSamples,
        batchSize : params.batchSize,
        distributionFn : s1distFn
    };
    
    var s1model = enc_initTrainedModel(s1Params, D);
    return s1model;
};

// s1seqSampling_getDistributionFn
//
// s1model : s1 model object constructed by s1inc_initTrainedModel
//           function above
//
// return s1 distribution function that takes s1 beam search output
// and returns an S1 rsa distribution
var s1seqSampling_getDistributionFn = function(s1model) {
    return s1model.modelParams.s1distFn;
};

// s1seqSampling_getS0Model
//
// s1model : s1 model object constructed by s1inc_initTrainedModel
//           function above
//
// return s0 model used in s1
var s1seqSampling_getS0Model = function(s1model) {
    return s1model.modelParams.s0model;
};

// s1seqSampling_getL0Model
//
// s1model : s1 model object constructed by s1inc_initTrainedModel
//           function above
//
// return l0 model
var s1seqSampling_getL0Model = function(s1model) {
    return s1model.modelParams.l0model;
};

// s1seqSampling_getMeaningFn
//
// s1model : s1 model object constructed by s1inc_initTrainedModel
//           function above
//
// return literal meaning function : utterance x world -> [0, 1]
var s1seqSampling_getMeaningFn = function(s1model) {
    var l0model = s1model.modelParams.l0model;
    var l0distFn = s1model.modelParams.l0distFn;
    var l0seqFn = s1model.modelParams.l0seqFn;
    var hiddenWorldFn = s1model.modelParams.rsaHiddenWorldFn;
    var observedWorldFn = s1model.modelParams.rsaObservedWorldFn;

    return function(utterance, world) {
        var l0seq = l0seqFn(utterance, hiddenWorldFn(world), observedWorldFn(world));
        var Dist = enc_modelDistribution(l0model, l0seq, l0distFn);
        return Math.exp(Dist.score(true));
    };
};

var _l1seqSampling_makeS0Dists = function(s0model, s0sampleDistractors, s0sampleSize, s0inputFn, observation, utterance, worldPriorSupport, maybeObserved) {
    if (s0sampleDistractors && maybeObserved !== undefined) {
        _.fromPairs(map(function(hidden) {
            return [hidden,
                util_objSoftmaxCategorical(_.flatten(map(function(possibleHidden) {
                    if (possibleHidden == maybeObserved)
                        return enc_modelScoredSamples(s0model, s0inputFn(observation, possibleHidden), util_objCategorical, s0sampleSize, true, utterance)
                    else
                        return enc_modelScoredSamples(s0model, s0inputFn(observation, possibleHidden), util_objCategorical, s0sampleSize, true)
                }, worldPriorSupport)))];
        }, worldPriorSupport));
    } else {
        var samples = s0sampleDistractors ? s0sampleSize * worldPriorSupport.length - 1 : s0sampleSize;
        return _.fromPairs(map(function(hidden) {
            return [hidden,
                util_objSoftmaxCategorical(enc_modelScoredSamples(s0model, s0inputFn(observation, hidden), util_objCategorical, s0sampleSize, true, utterance))]
        }, worldPriorSupport));
    }
};

var _s1seqSampling_makeS0Dists = function(s0model, s0sampleDistractors, s0sampleSize, s0inputFn, observation, utterance, worldPriorSupport) {
    var samples = s0sampleDistractors ? s0sampleSize * worldPriorSupport.length - 1 : s0sampleSize;
    return _.fromPairs(map(function(hidden) {
        return [hidden,
            util_objSoftmaxCategorical(enc_modelScoredSamples(s0model, s0inputFn(observation, hidden), util_objCategorical, s0sampleSize, true, utterance))]
    }, worldPriorSupport));
};

// s1seqSampling_getL1DistributionFn
//
// s1model : s1 model object constructed by l1seqSampling_initTrainedModel
//           function above
//
// datum : Datum from which to pull utterance for which the function will constuct a distribution
//
// return l1 distribution function that returns an L1 rsa distribution
// using the s1 model
var s1seqSampling_getL1DistributionFn = function(s1model, datum) {
    return function (s1fillerOutput, input, modelParams) {
        var observedWorldFn = modelParams.rsaObservedWorldFn;
        var hiddenWorldFn = modelParams.rsaHiddenWorldFn;
        var worldPrior = modelParams.rsaWorldPrior;
        var alpha = modelParams.rsaAlpha;
        var l0seqFn = modelParams.l0seqFn;
        var l0model = modelParams.l0model;
        var l0distFn = modelParams.l0distFn;
        var s0model = modelParams.s0model;
        var s0inputFn = modelParams.s0inputFn;
        var s0sampleSize = modelParams.s0sampleSize;
        var s0sampleDistractors = modelParams.s0sampleDistractors;

        var utterance = datum.output;
        var observation = observedWorldFn(input);

        var s0dists = _s1seqSampling_makeS0Dists(s0model, s0sampleDistractors, s0sampleSize, s0inputFn, observation, utterance, modelParams.rsaWorldPriorSupport);

        var rsaParams = {
            cacheSize: 100,
            alpha: alpha,
            parametersPrior: function(observation) { return observation },
            utterancePrior: function(observation, parameters, hidden) { sample(s0dists[hidden]); },
            worldPrior: worldPrior,
            denotationDistFn: function(utterance, hidden, parameters) {
                var l0seq = l0seqFn(utterance, hidden, parameters);
                return enc_modelDistribution(l0model, l0seq, l0distFn);
            }
        };

        var L1 = makeRSA(rsaParams, RSA_L, 1);
        return L1(utterance, observation);
    };
};

// s1seqSampling_getL0DistributionFn
//
// s1model : s1 model object constructed by l1seqSampling_initTrainedModel
//           function above
//
// datum : Datum from which to pull utterance for which the function will constuct a distribution
//
// return l1 distribution function that returns an L1 rsa distribution
// using the s1 model
var s1seqSampling_getL0DistributionFn = function(s1model, datum) {
    return function (s1fillerOutput, input, modelParams) {
        var observedWorldFn = modelParams.rsaObservedWorldFn;
        var worldPrior = modelParams.rsaWorldPrior;

        var l0seqFn = modelParams.l0seqFn;
        var l0model = modelParams.l0model;
        var l0distFn = modelParams.l0distFn;

        var rsaParams = {
            cacheSize: 100,
            parametersPrior: function(observation) { return observation },
            worldPrior: worldPrior,
            denotationDistFn: function(utterance, hidden, parameters) {
                var l0seq = l0seqFn(utterance, hidden, parameters);
                return enc_modelDistribution(l0model, l0seq, l0distFn);
            }
        };

        var L0 = makeRSA(rsaParams, RSA_L, 0);
        var observation = observedWorldFn(input);
        var utterance = datum.output;
        return L0(utterance, observation);
    };
};
