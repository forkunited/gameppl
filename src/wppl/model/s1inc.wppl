// s1inc.wppl
//
// Represents an incremental RSA S1 sequence learning model

// _initS1DistFn
//
// Private function for constructing function that takes
// s1 encoder/decoder beam search output and constructs an
// rsa S1 distribution using the output for the utterance
// prior
var _initS1DistFn = function(initParams) {
    var worldPrior = initParams.rsaWorldPrior;
    var hiddenWorldFn = initParams.rsaHiddenWorldFn;
    var observedWorldFn = initParams.rsaObservedWorldFn;
    var alpha = initParams.rsaAlpha;
    var l0seqFn = initParams.l0seqFn; // utterance x hidden x observation -> l0 input vector sequence

    return function(s1output, world, params) {
        var l0model = params.l0model;
        var l0distFn = params.l0distFn;

        var rsaParams = {
            cacheSize: 10000,
            alpha: alpha,
            parametersPrior: function(observation) { return observation },
            utterancePrior: function(observation, parameters) { sample(util_objSoftmaxCategorical(s1output)); },
            worldPrior: worldPrior,
            denotationDistFn: function(utterance, hidden, parameters) {
                var l0seq = l0seqFn(utterance, hidden, parameters);
                return enc_modelDistribution(l0model, l0seq, l0distFn);
            }
        };

        var S1 = makeRSA(rsaParams, RSA_S, 1);
        var observation = observedWorldFn(world);
        var hidden = hiddenWorldFn(world);

        return S1(hidden, observation);
    }
};

// _initS1StepFn
//
// Private function for constructing function that takes
// takes steps in the s1 decoder beam search.  Each step
// takes a state and previous sequence, and outputs
// a next state and scores for next possible tokens in the
// sequence.  Scores are computed by a language model (s_model),
// and heuristics are computed using the RSA L0 model applied
// to partial utterances
var _initS1StepFn = function(params) {
    var s_model = params.s_model;
    var l0model = params.l0model;
    var l0distFn = params.l0distFn;
    var l0seqFn = params.l0seqFn;
    var alpha = params.rsaAlpha;
    var worldPrior = params.rsaWorldPrior;
    var hiddenWorldFn = params.rsaHiddenWorldFn;
    var observedWorldFn = params.rsaObservedWorldFn;
    var languagePruneSize = params.languagePruneSize;

    var parametersPrior = function (observation) { return observation };

    return function(state, seq, world, maybeFixedOutput) {
        var s_stepFn = seq_getDecoderStepFn(enc_getObject(enc_getDecoder(s_model)));
        var l0stepFn = seq_getEncoderStepFn(enc_getObject(enc_getEncoder(l0model)));

        var s_out = s_stepFn(state.s, seq);

        var observedWorld = observedWorldFn(world);
        var hiddenWorld = hiddenWorldFn(world);

        var hiddenSupport = Infer({method : 'enumerate'}, function() { worldPrior(observedWorld) }).support();
        var idxHiddenSupport = mapIndexed(function(index, hidden) { return [index, hidden] }, hiddenSupport);

        var l0states = mapIndexed(function(index, l0state) {
            var inputSeqHidden = l0seqFn([seq[seq.length - 1]], hiddenSupport[index], observedWorld);
            return l0stepFn(l0state, inputSeqHidden[0]);
        }, state.l0);

        var nextState = { s : s_out.state, l0 : l0states };

        var sortedOutputs = sort(s_out.outputs, gt, function(output) { output.value === maybeFixedOutput ? Infinity : output.score });
        var prunedOutputs = (languagePruneSize !== undefined && languagePruneSize < Infinity) ?
            gameppl.util._first(sortedOutputs, languagePruneSize) : sortedOutputs;
        var outputs = map(function(output) {
            var rsaParams = {
                cacheSize: 100,
                alpha: alpha,
                parametersPrior: parametersPrior,
                worldPrior: worldPrior,
                denotationDistFn: function (utteranceLast, hidden, parameters) {
                    var hiddenIndexPair = find(function(idxHidden) { _.isEqual(idxHidden[1], hidden) }, idxHiddenSupport);
                    var hiddenIndex = hiddenIndexPair[0];
                    var l0state = l0states[hiddenIndex];
                    var l0seq = l0seqFn([utteranceLast], hidden, parameters);
                    return enc_modelDistribution(l0model, l0seq, l0distFn, l0state);
                }
            };

            var L0 = makeRSA(rsaParams, RSA_L, 0);
            var DistL0 = L0(output.value, observedWorld);
            var l0score = DistL0.score(hiddenWorld);

            return {
                value : output.value,
                score : output.score,
                heuristic : ad.lift(l0score)
            }
        }, prunedOutputs);

        return {
            state : nextState,
            outputs : outputs
        }
    };
};

// s1inc_initTrainedModel
//
// params:
//   maxUtteranceLength : Maximum length for decoded utterances
//   worldDimension : Dimension of input world
//   utteranceDimension : Size of utterance token vectors
//   l0inputDimension : Dimension of inputs to the l0 encoder
//   latentDimension : Size of hidden layer (must be even)
//   beamSize : Beam size for beam search
//   languagePruneSize : Number of next tokens to take from language model at each beam step
//   iterations : Training iterations
//   sIterations : Training iterations for internal s models
//   gradientSamples : Training gradient samples
//   batchSize : Training batch size,
//   l0seqFn : utterance x hidden x observation -> l0 input vector sequence
//   rsaAlpha : Speaker rationality
//   rsaWorldPrior : observed world -> sample of hidden world
//   rsaWorldPriorSize : Number of elements in world prior support for a given observation
//   rsaHiddenWorldFn : world -> part of world hidden from listener
//   rsaObservedWorldFn : world -> part of world observed by listener
// D : Data
//
// return trained s1 incremental model
var s1inc_initTrainedModel = function(params, D) {
    // Language model
    var sParams = {
        encoderType : ENC_NN,
        decoderType : ENC_SEQ,
        encoderParamFn : function() {
            return {
                name : "enc_S",
                inputDimension : 0,
                encoderType : NN_ENCODER_CONSTANT,
                latentDimension : params.latentDimension
            };
        },
        decoderParamFn : function() {
            return {
                name : "dec_S",
                latentDimension : params.latentDimension,
                outputDimension : params.utteranceDimension,
                initStepFn : nn_initSequenceDecoderStep,
                startSymbol : gameppl.feature.symbols.START_SYMBOL,
                terminalSymbol : gameppl.feature.symbols.TERMINAL_SYMBOL,
                maxLength : params.maxUtteranceLength,
                samplingType : SEQ_DECODER_EXACT,
                approximationBeamSize : params.beamSize
            };
        },
        iterations : params.sIterations,
        gradientSamples : params.gradientSamples,
        batchSize : params.batchSize,
        distributionFn : util_objCategorical
    };

    var l0Params = {
        encoderType : ENC_SEQ,
        decoderType : ENC_NN,
        encoderParams : {
            name : "enc_L0",
            latentDimension : params.latentDimension,
            inputDimension : params.l0inputDimension,
            initStepFn : nn_initSequenceEncoderStep,
            inputType : DATA_TYPE_VECTOR,
            makeInitialStateFn : function() {
                var encoderConstant = nn_initEncoder({name : "enc_init_L0", encoderType : NN_ENCODER_CONSTANT, latentDimension : params.latentDimension });
                return nn_applyEncoder(encoderConstant);
            }
        },
        decoderParams : {
            name: "dec_L0",
            decoderType :  NN_DECODER_SIGMOID,
            latentDimension : params.latentDimension,
            outputDimension : 1
        }
    };

    var l0distFn = function(output) {
        return Bernoulli({ p : T.toScalars(output)[0] });
    };

    var s_model = enc_initTrainedModel(sParams, D);

    /* S1 */

    var s1distFn = _initS1DistFn(params);

    var s1Params = {
        encoderType : ENC_NN,
        decoderType : ENC_SEQ,
        modelParamFn : function() {
            var l0model = enc_initModel(l0Params);

            var l0distFn = function(output) {
                return Bernoulli({ p : T.toScalars(output)[0] });
            };

            return {
                s_model : s_model,
                l0model : l0model,
                l0distFn : l0distFn,
                l0seqFn : params.l0seqFn,
                rsaAlpha : params.rsaAlpha,
                rsaWorldPrior : params.rsaWorldPrior,
                rsaHiddenWorldFn : params.rsaHiddenWorldFn,
                rsaObservedWorldFn : params.rsaObservedWorldFn,
                s1distFn : s1distFn
            };
        },
        encoderParamFn : function(modelParams) {
            return {
                name : "enc_S1",
                encoderType : NN_ENCODER_CONSTANT,
                inputDimension : 0,
                latentDimension : params.latentDimension,
                constantFn : function() {
                    var s_encoder = enc_getEncoder(modelParams.s_model);
                    var l0encoder = enc_getEncoder(modelParams.l0model);
                    var l0initialState = seq_getInitialState(enc_getObject(l0encoder));
                    return {
                        s : enc_applyEncoder(s_encoder),
                        l0 : repeat(params.rsaWorldPriorSize, function() { return l0initialState })
                    };
                }
            };
        },
        decoderParamFn : function() {
            return {
                name : "dec_S1",
                latentDimension : params.latentDimension,
                initStepFn : _initS1StepFn,
                startSymbol : gameppl.feature.symbols.START_SYMBOL,
                terminalSymbol : gameppl.feature.symbols.TERMINAL_SYMBOL,
                maxLength : params.maxUtteranceLength,
                samplingType : SEQ_DECODER_APPROXIMATE_BEAM,
                approximationBeamSize : params.beamSize,
                languagePruneSize : params.languagePruneSize
            };
        },
        iterations : params.iterations,
        gradientSamples : params.gradientSamples,
        batchSize : params.batchSize,
        distributionFn : s1distFn
    };

    var s1model = enc_initTrainedModel(s1Params, D);
    return s1model;
};

// s1inc_getDistributionFn
//
// s1model : s1 model object constructed by s1inc_initTrainedModel
//           function above
//
// return s1 distribution function that takes s1 beam search output
// and returns an S1 rsa distribution
var s1inc_getDistributionFn = function(s1model) {
    return s1model.modelParams.s1distFn;
};

// s1inc_getSModel
//
// s1model : s1 model object constructed by s1inc_initTrainedModel
//           function above
//
// return language model used in s1
var s1inc_getSModel = function(s1model) {
    return s1model.modelParams.s_model;
};

// s1inc_getL0Model
//
// s1model : s1 model object constructed by s1inc_initTrainedModel
//           function above
//
// return l0 model
var s1inc_getL0Model = function(s1model) {
    return s1model.modelParams.l0model;
};

// s1inc_getMeaningFn
//
// s1model : s1 model object constructed by s1inc_initTrainedModel
//           function above
//
// return literal meaning function : utterance x world -> [0, 1]
var s1inc_getMeaningFn = function(s1model) {
    var l0model = s1model.modelParams.l0model;
    var l0distFn = s1model.modelParams.l0distFn;
    var l0seqFn = s1model.modelParams.l0seqFn;
    var hiddenWorldFn = s1model.modelParams.rsaHiddenWorldFn;
    var observedWorldFn = s1model.modelParams.rsaObservedWorldFn;

    return function(utterance, world) {
        var l0seq = l0seqFn(utterance, hiddenWorldFn(world), observedWorldFn(world));
        var Dist = enc_modelDistribution(l0model, l0seq, l0distFn);
        return  Math.exp(Dist.score(true));
    };
};
