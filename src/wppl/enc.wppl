const ENC_NN = 0;
const ENC_SEQ = 1;

var enc_initEncoder = function(type, params) {
    if (type === ENC_NN) {
        return { type : type, obj : nn_initEncoder(params) };
    } else if (type === ENC_SEQ) {
        return { type : type, obj : seq_initEncoder(params) };
    }
};

var enc_applyEncoder = function(encoder, input) {
    if (encoder.type === ENC_NN) {
        return nn_applyEncoder(encoder.obj, input);
    } else if (encoder.type === ENC_SEQ) {
        return seq_applyEncoder(encoder.obj, input);
    }
}

var enc_initDecoder = function(type, params) {
    if (type === ENC_NN) {
        return { type : type, obj : nn_initDecoder(params) };
    } else if (type === ENC_SEQ) {
        return { type : type, obj : seq_initDecoder(params) };
    }
};

var enc_decodeSample = function(decoder, latentState, distributionFn, maybeObservation) {
    if (decoder.type === ENC_NN) {
        return nn_decodeSample(decoder.obj, latentState, distributionFn, maybeObservation);
    } else if (decoder.type === ENC_SEQ) {
        return seq_decodeSample(decoder.obj, latentState, distributionFn, maybeObservation);
    }
};

var enc_decodeDistribution = function(decoder, latentState, distributionFn) {
    if (decoder.type === ENC_NN) {
        return nn_decodeDistribution(decoder.obj, latentState, distributionFn);
    } else if (decoder.type === ENC_SEQ) {
        return seq_decodeDistribution(decoder.obj, latentState, distributionFn);
    }
};

var enc_initModel = function(params) {
    return { encoder : enc_initEncoder(params.encoderType, params.encoderParams),
             decoder : enc_initDecoder(params.decoderType, params.decoderParams) };
};

var enc_modelSample = function(model, input, distributionFn, maybeObservation) {
    var encoder = model.encoder;
    var decoder = model.decoder;
    var latentState = enc_applyEncoder(encoder, input);
    return enc_decodeSample(decoder, latentState, distributionFn, maybeObservation);
};

var enc_modelDistribution = function(model, input, distributionFn) {
    var encoder = model.encoder;
    var decoder = model.decoder;
    var latentState = enc_applyEncoder(encoder, input);
    return enc_decodeDistribution(decoder, latentState, distributionFn);
};

var _enc_initTrainingObj = function(params) {
    return function(data) {
        return function() {
            var encoderParamFn = params.encoderParamFn;
            var decoderParamFn = params.decoderParamFn;
            var encoderParams = encoderParamFn();
            var decoderParams = decoderParamFn();
            var model = enc_initModel({
                encoderType : params.encoderType,
                decoderType : params.decoderType,
                encoderParams : encoderParams,
                decoderParams : decoderParams });

            if (data) {
                mapData({ data: data, batchSize : params.batchSize}, function(datum) {
                    enc_modelSample(model, datum.input, params.distributionFn, datum.output);
                });
            }

            return model;
        }
    }
};

var _enc_trainLearningModel = function(trainingObj, data, iterations, gradientSamples) {
    var trainingResults = Optimize(trainingObj(data),
        {
            steps: iterations,
            estimator : { ELBO : { samples : gradientSamples }},
        });
    return sample(SampleGuide(trainingObj(), { params: trainingResults }));
};

// enc_initTrainedModel
//
// params :
//   iterations : training iterations
//   gradientSamples : gradient sample count for optimization
//   distributionFn : decoder output -> distribution
//   encoderType : (ENC_NN, ENC_SEQ)
//   decoderType : (ENC_NN, ENC_SEQ)
//   encoderParamFn : () -> Encoder parameters
//   decoderParamFn : () -> Decoder parameters
//   [batchSize] : mini-batch size
// data : data set
//
// Return model
var enc_initTrainedModel = function(params, data) {
    var trainingObj = _enc_initTrainingObj(params);
    var model = _enc_trainLearningModel(trainingObj, data, params.iterations, params.gradientSamples);
    return model;
};
