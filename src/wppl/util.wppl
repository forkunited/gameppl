// util.js
//
// Utility functions
//

// util_applyFn
//
// fn : Function to apply to arguments
// args : List of arguments
//
// returrn fn(args)
var util_applyFn = function(fn, args) {
    if (args.length <= 1 || args.length >=5) {
        display("applyFn error: Requires at least 1 but no more than 4 arguments");
        return undefined;
    }

    if (args.length == 1) {
        return fn(args[0]);
    } else if (args.length == 2) {
        return fn(args[0], args[1]);
    } else if (args.length == 3) {
        return fn(args[0], args[1], args[2]);
    } else if (args.length == 4) {
        return fn(args[0], args[1], args[2], args[3]);
    }
};

// util_mapTupleArgs
//
// fn : Function to apply to argument tuples
// args : List of argument lists to pass as tuples to fn
//
// return fn applied to lists of arguments constructed from
// lists given in args
var util_mapTupleArgs = function(fn, args) {
    if (args.length <= 1 || args.length >=5) {
        display("mapTupleArgs error: At least 1 but no more than 4 lists of arguments should be given");
        return undefined;
    }

    return mapN(function(i) {
        var args = mapN(function(j) { return args[j][i] }, args.length);
        return util_applyFn(fn, args);
    }, args[0].length);
};

// util_mapTuple
//
// fn : Function to apply to argument tuples
// [args...] : Argument lists to pass as tuples to fn
//
// return fn applied to lists of arguments constructed from
// given lists
var util_mapTuple = function(fn) {
    if (arguments.length <= 1 || arguments.length >=5) {
        display("mapTuple error: At least 1 but no more than 4 lists of arguments should be given");
        return undefined;
    }

    var args = _.rest(arguments, 1);
    return util_mapTupleArgs(fn, args);
};

// _listProduct
//
// Private function
var _listProduct = function(args) {
    var listProductPair = function(l1, l2) {
        return _.flatten(map(function (item1) {
            return map(function (item2) {
                return _.flatten([[item1], item2], true);
            }, l2);
        }, l1),true);
    };

    return reduce(function(l, acc) { return listProductPair(l, acc) }, [[]], args);
};

// util_listProduct
//
// [args...] : Lists over which to compute cartesian product
//
// return cartesian product of list arguments
var util_listProduct = function() {
    return _listProduct(arguments);
};

// util_mapProductArgs
//
// fn : Function to apply to argument tuples
// args : List of argument lists from which to construct
//        cartesian product to pass as arguments to fn
//
// return fn applied to lists of arguments constructed from
// lists given in args
var util_mapProductArgs = function(fn, args) {
    if (args.length <= 1 || args.length >=5) {
        display("mapProductArgs error: At least 1 but no more than 4 lists of arguments should be given");
        return undefined;
    }

    var tuples = _listProduct(args);

    return map(function(tuple) {
        return util_applyFn(fn, tuple);
    }, tuples);
};

// util_mapTuple
//
// fn : Function to apply to argument tuples
// [args...] : Argument lists from which to construct
//             cartesian product from which to pass
//             tuples to fn
//
// return fn applied to lists of arguments constructed from
// given lists
var util_mapProduct = function(fn) {
    if (arguments.length <= 1 || arguments.length >=5) {
        display("mapProduct error: At least 1 but no more than 4 lists of arguments should be given");
        return undefined;
    }

    var arguments0 = arguments;
    var args = mapN(function(i) { return arguments0[i+1] }, arguments0.length - 1);
    return util_mapProductArgs(fn, args);
    /*return _.flatten(
     map(function(item1) {
     return map(function(item2) {
     return fn(item1, item2);
     }, arr2);
     }, arr1), false);*/
};

// util_constructSupport
//
// dist : function that returns a sample from some distribution
//        possibly given some paramters
// [parameters] : Optional list of parameters to feed into dist
//
// returns support of distribution represented by dist.  If parameters
// are given, then returns a list of supports for each parameter
// and a list of corresponding parameters.
var util_constructSupport = function(dist, parameters) {
	if (parameters != undefined) {
        return _.unzip(_.flatten(map(function(param) {
            return (Infer({method : 'enumerate'},
                    function () {
                        return [dist(param), param];
                    })
            ).support()
        }, parameters), true));
	} else {
        return (Infer({method: 'enumerate'}, dist)).support();
    }
};

// util_parseArgs
//
// returns object containing command-line argument names
// mapped to argument values under the assumption that arguments
// are given in the form '--name value'
var util_parseArgs = function() {
	var args = process.argv;
	var keyValues = mapN(function(index) {
		if (index != args.length - 1 && args[index].startsWith("--")) {
			return [args[index].substring(2,args[index].length), args[index + 1]];
		} else {
			return undefined
		} 
	}, args.length);

	var keyValuesFiltered = filter(function(keyValue) {
		return keyValue != undefined;
	}, keyValues);

	return gameppl.util.makeObject(keyValuesFiltered);
};

/*
 * Random subset helper function
 */

// util_randomSubset
//
// l : a list
// k : number of elements in the random subset
// ordered : indicates whether or not to return the subset in the same
//           order as elements are given in l or in random order
//
// returns a random subset of l of size k
var util_randomSubset = function(l, k, ordered) {
    var subset = ordered ? sort(util_randomIndexSubset(l.length, k)) : util_randomIndexSubset(l.length, k);
    var points = map(function(index) { return l[index] }, subset);
    return points;
};

// util_randomIndexSubset
//
// n : Number of indices
// k : Number of elements in the random subset
//
// returns a random subset of [n] of size k
var util_randomIndexSubset = function(n, k) {
    var randomIndexSubsetHelper = function(subset, possible) {
        var nextIndex = randomInteger(possible.length);
        var nextVal = possible[nextIndex];
        var nextPossible = _.without(possible, nextVal);
        var nextSubset = _.union(subset, [nextVal]);


        if (nextSubset.length == k) {
            return nextSubset;
        } else {
            return randomIndexSubsetHelper(nextSubset, nextPossible);
        }
    };

    return randomIndexSubsetHelper([], _.range(n));
};

/*
 * Old slow version of random subset that relies on shuffling
 * (slow and deprecated... don't use)
 */

// util_randomIndexSubsetShuffle
//
// Deprecated
var util_randomIndexSubsetShuffle = function(n, k) {
    var perm = util_shuffleIndex(n);
    return _.initial(perm, n-k);
};

// util_shuffleIndex
//
// Deprecated
var util_shuffleIndex = function(n) {
    var perm = _.range(n);
    return util_shuffleIndexHelper(n-1, perm);
};

// util_shuffleIndexHelper
//
// Deprecated
var util_shuffleIndexHelper = function(i, perm) {
    if (i == 0)
        return perm
    else {
        var temp = perm[i];
        var swap = randomInteger(i+1);
        return util_shuffleIndexHelper(i - 1, mapIndexed(function(index, element) {
            return index == i ? perm[swap] :
                (index == swap ? temp :
                    perm[index])
        }, perm))
    }
};

/* String stuff */

// util_strProduct
//
// strList1 : List of strings
// strList2 : List of strings
// midStr : String to put between strings from first and second lists
// endStr : String to put at end of strings formed from first and second lists
//
// return a list of strings of the form [strList_1]midStr[str_List_2]endStr
var util_strProduct = function(strList1, strList2, midStr, endStr) {
    return _.flatten(map(function(str1) {
        return map(function(str2) {
            return str1 + midStr + str2 + endStr
        }, strList2)
    }, strList1));
};

/* Distribution stuff */

// util_observeHelper
//
// Dist : Distribution
// [val] : Optional observed value
//
// returns val (if given) or value sampled from distribution
// after possibly factoring on the likelihood of val according to
// Dist
var util_observeHelper = function(Dist, val) {
    if (val !== undefined) {
        factor(Dist.score(val));
        return val;
    } else {
        return sample(Dist, {
            guide: function() {
                return Dist; // prevent auto-guide in Forward; always use model dist
            }
        });
    }
};

// util_objCategorical
//
// objs : (value, score) list
//
// returns categorical distribution constructed from
// scored values
var util_objCategorical = function(objs) {
    var vs = map(function(obj) { obj.value }, objs);
    var ps = map(function(obj) { obj.score }, objs);
    //var ps_t = T.fromScalars(ps);

    return Categorical({ vs : vs, ps : ps });
};

// util_objSoftmaxCategorical
//
// objs : (value, score) list
//
// returns categorical distribution constructed from
// softmax function applied to scored values
var util_objSoftmaxCategorical = function(objs) {
    var vs = map(function(obj) { obj.value }, objs);
    var ps = map(function(obj) { obj.score }, objs);
    return Categorical({ vs : vs, ps : T.toScalars(T.softmax(T.fromScalars(ps))) });
};
